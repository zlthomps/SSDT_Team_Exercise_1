/*
Deployment script for SSDT_Team_Exercise_1

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar SingleSignOn "SingleSignOn"
:setvar DatabaseName "SSDT_Team_Exercise_1"
:setvar DefaultFilePrefix "SSDT_Team_Exercise_1"
:setvar DefaultDataPath "C:\Program Files (x86)\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files (x86)\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping unnamed constraint on [Archive].[CustomerNoteHistory]...';


GO
ALTER TABLE [Archive].[CustomerNoteHistory] DROP CONSTRAINT [DF__CustomerNote__Id__1AD3FDA4];


GO
PRINT N'Dropping unnamed constraint on [Person].[Salesperson]...';


GO
ALTER TABLE [Person].[Salesperson] DROP CONSTRAINT [DF__Salespers__isAct__19DFD96B];


GO
PRINT N'Dropping [Archive].[FK_CustomerNoteHistory_CustomerId_Customer_Id]...';


GO
ALTER TABLE [Archive].[CustomerNoteHistory] DROP CONSTRAINT [FK_CustomerNoteHistory_CustomerId_Customer_Id];


GO
PRINT N'Dropping [Person].[FK_CustomerNote_CustomerId_Customer_Id]...';


GO
ALTER TABLE [Person].[CustomerNote] DROP CONSTRAINT [FK_CustomerNote_CustomerId_Customer_Id];


GO
PRINT N'Dropping [Person].[chk_CreatedDate]...';


GO
ALTER TABLE [Person].[CustomerNote] DROP CONSTRAINT [chk_CreatedDate];


GO
PRINT N'Unbinding columns from changing objects on table [Archive].[CustomerNoteHistory]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [Archive].[tmp_ms_xx_CustomerNoteHistory] (
    [Id]           UNIQUEIDENTIFIER NOT NULL,
    [CustomerId]   UNIQUEIDENTIFIER NOT NULL,
    [Note]         NVARCHAR (MAX)   NULL,
    [CreatedDate]  DATETIME         NOT NULL,
    [ModifiedDate] DATETIME         NOT NULL
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [Archive].[CustomerNoteHistory])
    BEGIN
        INSERT INTO [Archive].[tmp_ms_xx_CustomerNoteHistory] ([Id], [CustomerId], [Note], [CreatedDate], [ModifiedDate])
        SELECT [Id],
               [CustomerId],
               [Note],
               [CreatedDate],
               [ModifiedDate]
        FROM   [Archive].[CustomerNoteHistory];
    END

DROP TABLE [Archive].[CustomerNoteHistory];

EXECUTE sp_rename N'[Archive].[tmp_ms_xx_CustomerNoteHistory]', N'CustomerNoteHistory';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Unbinding columns from changing objects on table [Person].[CustomerNote]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [Person].[tmp_ms_xx_CustomerNote] (
    [Id]           UNIQUEIDENTIFIER NOT NULL,
    [CustomerId]   UNIQUEIDENTIFIER NOT NULL,
    [Note]         NVARCHAR (MAX)   NULL,
    [CreatedDate]  DATETIME         NOT NULL,
    [ModifiedDate] DATETIME         NOT NULL
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [Person].[CustomerNote])
    BEGIN
        INSERT INTO [Person].[tmp_ms_xx_CustomerNote] ([Id], [CustomerId], [Note], [CreatedDate], [ModifiedDate])
        SELECT [Id],
               [CustomerId],
               [Note],
               [CreatedDate],
               [ModifiedDate]
        FROM   [Person].[CustomerNote];
    END

DROP TABLE [Person].[CustomerNote];

EXECUTE sp_rename N'[Person].[tmp_ms_xx_CustomerNote]', N'CustomerNote';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Dropping [CustNoteHistPS]...';


GO
DROP PARTITION SCHEME [CustNoteHistPS];


GO
PRINT N'Dropping [CustNotePS]...';


GO
DROP PARTITION SCHEME [CustNotePS];


GO
PRINT N'Dropping [CustNoteHisPF]...';


GO
DROP PARTITION FUNCTION [CustNoteHisPF];


GO
PRINT N'Dropping [CustNotePF]...';


GO
DROP PARTITION FUNCTION [CustNotePF];


GO
PRINT N'Creating [CustNoteHisPF]...';


GO
CREATE PARTITION FUNCTION [CustNoteHisPF](DATETIME)
    AS RANGE RIGHT
    FOR VALUES (N'12/1/2013');


GO
PRINT N'Creating [CustNotePF]...';


GO
CREATE PARTITION FUNCTION [CustNotePF](DATETIME)
    AS RANGE RIGHT
    FOR VALUES (N'2014-01-01T00:00:00.000', N'2014-02-01T00:00:00.000', N'2014-03-01T00:00:00.000', N'2014-04-01T00:00:00.000', N'2014-05-01T00:00:00.000', N'2014-06-01T00:00:00.000', N'2014-07-01T00:00:00.000', N'2014-08-01T00:00:00.000', N'2014-09-01T00:00:00.000', N'2014-10-01T00:00:00.000', N'2014-11-01T00:00:00.000', N'2014-12-01T00:00:00.000', N'2015-01-01T00:00:00.000', N'2015-02-01T00:00:00.000');


GO
PRINT N'Creating [CustNoteHistPS]...';


GO
CREATE PARTITION SCHEME [CustNoteHistPS]
    AS PARTITION [CustNoteHisPF]
    ALL TO ([PRIMARY]);


GO
PRINT N'Creating [CustNotePS]...';


GO
CREATE PARTITION SCHEME [CustNotePS]
    AS PARTITION [CustNotePF]
    ALL TO ([PRIMARY]);


GO
PRINT N'Starting rebuilding table [Archive].[CustomerNoteHistory]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [Archive].[tmp_ms_xx_CustomerNoteHistory] (
    [Id]           UNIQUEIDENTIFIER DEFAULT NEWID() NOT NULL,
    [CustomerId]   UNIQUEIDENTIFIER NOT NULL,
    [Note]         NVARCHAR (MAX)   NULL,
    [CreatedDate]  DATETIME         NOT NULL,
    [ModifiedDate] DATETIME         NOT NULL
);

CREATE UNIQUE CLUSTERED INDEX [tmp_ms_xx_index_PK_CustomerNoteHistory_Id]
    ON [Archive].[tmp_ms_xx_CustomerNoteHistory]([Id] ASC, [CreatedDate] ASC)
    ON [CustNoteHistPS] ([CreatedDate]);

IF EXISTS (SELECT TOP 1 1 
           FROM   [Archive].[CustomerNoteHistory])
    BEGIN
        INSERT INTO [Archive].[tmp_ms_xx_CustomerNoteHistory] ([Id], [CreatedDate], [CustomerId], [Note], [ModifiedDate])
        SELECT   [Id],
                 [CreatedDate],
                 [CustomerId],
                 [Note],
                 [ModifiedDate]
        FROM     [Archive].[CustomerNoteHistory]
        ORDER BY [Id] ASC, [CreatedDate] ASC;
    END

DROP TABLE [Archive].[CustomerNoteHistory];

EXECUTE sp_rename N'[Archive].[tmp_ms_xx_CustomerNoteHistory]', N'CustomerNoteHistory';

EXECUTE sp_rename N'[Archive].[CustomerNoteHistory].[tmp_ms_xx_index_PK_CustomerNoteHistory_Id]', N'PK_CustomerNoteHistory_Id', N'INDEX';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [Person].[CustomerNote]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [Person].[tmp_ms_xx_CustomerNote] (
    [Id]           UNIQUEIDENTIFIER DEFAULT NEWID() NOT NULL,
    [CustomerId]   UNIQUEIDENTIFIER NOT NULL,
    [Note]         NVARCHAR (MAX)   NULL,
    [CreatedDate]  DATETIME         NOT NULL,
    [ModifiedDate] DATETIME         NOT NULL
);

CREATE UNIQUE CLUSTERED INDEX [tmp_ms_xx_index_PK_CustomerNote_Id]
    ON [Person].[tmp_ms_xx_CustomerNote]([Id] ASC, [CreatedDate] ASC)
    ON [CustNotePS] ([CreatedDate]);

IF EXISTS (SELECT TOP 1 1 
           FROM   [Person].[CustomerNote])
    BEGIN
        INSERT INTO [Person].[tmp_ms_xx_CustomerNote] ([Id], [CreatedDate], [CustomerId], [Note], [ModifiedDate])
        SELECT   [Id],
                 [CreatedDate],
                 [CustomerId],
                 [Note],
                 [ModifiedDate]
        FROM     [Person].[CustomerNote]
        ORDER BY [Id] ASC, [CreatedDate] ASC;
    END

DROP TABLE [Person].[CustomerNote];

EXECUTE sp_rename N'[Person].[tmp_ms_xx_CustomerNote]', N'CustomerNote';

EXECUTE sp_rename N'[Person].[CustomerNote].[tmp_ms_xx_index_PK_CustomerNote_Id]', N'PK_CustomerNote_Id', N'INDEX';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating unnamed constraint on [Person].[Salesperson]...';


GO
ALTER TABLE [Person].[Salesperson]
    ADD DEFAULT CAST(1 AS BIT) FOR [isActive];


GO
PRINT N'Creating unnamed constraint on [Person].[CustomerNote]...';


GO
ALTER TABLE [Person].[CustomerNote]
    ADD DEFAULT NEWID() FOR [Id];


GO
PRINT N'Creating [Archive].[FK_CustomerNoteHistory_CustomerId_Customer_Id]...';


GO
ALTER TABLE [Archive].[CustomerNoteHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_CustomerNoteHistory_CustomerId_Customer_Id] FOREIGN KEY ([CustomerId]) REFERENCES [Person].[Customer] ([Id]);


GO
PRINT N'Creating [Person].[FK_CustomerNote_CustomerId_Customer_Id]...';


GO
ALTER TABLE [Person].[CustomerNote] WITH NOCHECK
    ADD CONSTRAINT [FK_CustomerNote_CustomerId_Customer_Id] FOREIGN KEY ([CustomerId]) REFERENCES [Person].[Customer] ([Id]);


GO
PRINT N'Altering [dbo].[usp_ArchiveCustomerNoteSwitch]...';


GO

ALTER PROCEDURE usp_ArchiveCustomerNoteSwitch
AS
    BEGIN

        SET XACT_ABORT ON

        DECLARE @MinBoundaryCustNote NVARCHAR(25)
        DECLARE @NextBoundaryCustNote NVARCHAR(25)
        DECLARE @MinBoundaryCustNoteArchive NVARCHAR(25)
        DECLARE @NextBoundaryCustNoteArchive NVARCHAR(25)
        DECLARE @Constraint_Sqlsmtpt NVARCHAR(MAX)


        BEGIN TRY
            BEGIN TRANSACTION

----Person.CustomerNote----
            SET @MinBoundaryCustNote =
                ( SELECT    MIN(CONVERT(VARCHAR(10), CAST(value AS DATE), 120))
                  FROM      master.sys.partition_range_values AS prv
                            INNER JOIN sys.partition_functions AS pf ON pf.function_id = prv.function_id
                  WHERE     pf.name = 'CustNotePF'
                )

            SET @NextBoundaryCustNote =
                ( SELECT    MAX(CONVERT(VARCHAR(10), DATEADD(MONTH, 1,
                                                             CAST(value AS DATE)), 120))
                  FROM      sys.partition_range_values AS prv
                            INNER JOIN sys.partition_functions AS pf ON pf.function_id = prv.function_id
                  WHERE     pf.name = 'CustNotePF'
                )

--Split in New Part to Archive Table here, matching boundary in src
            ALTER PARTITION SCHEME CustNoteHistPS NEXT USED [Primary]
            ALTER PARTITION FUNCTION CustNoteHisPF()
            SPLIT RANGE (@MinBoundaryCustNote)
	
--Drop Constraint and Re-Create with min boundary on src table
            IF EXISTS ( SELECT  *
                        FROM    sys.check_constraints AS cs
                        WHERE   cs.name = 'chk_CreatedDate' )
                BEGIN
                    ALTER TABLE Person.CustomerNote DROP CONSTRAINT chk_CreatedDate
                END 

            SET @Constraint_Sqlsmtpt = 'ALTER TABLE person.CustomerNote ADD CONSTRAINT chk_CreatedDate CHECK (CreatedDate >='
                + ''''
                + CAST(DATEADD(MONTH, -1, @MinBoundaryCustNote) AS NVARCHAR(255))
                + ''')'

            EXEC(@Constraint_Sqlsmtpt)

--Move Data to Part in Archive
            ALTER TABLE Person.CustomerNote SWITCH 
            PARTITION 1 TO Archive.CustomerNoteHistory PARTITION 2

--Deleting the old empty partition
            ALTER PARTITION FUNCTION CustNotePF()
            MERGE RANGE (@MinBoundaryCustNote)

 --Adding new part for current mo
            ALTER PARTITION SCHEME CustNotePS NEXT USED [Primary]

            ALTER PARTITION FUNCTION CustNotePF()
            SPLIT RANGE (@NextBoundaryCustNote)

----Archive.CustomerNoteHistory----

            SET @MinBoundaryCustNoteArchive = ( SELECT TOP 1
                                                        MIN(CONVERT(VARCHAR(10), CAST(value AS DATE), 120))
                                                FROM    sys.partition_range_values
                                                        AS prv
                                                        INNER JOIN sys.partition_functions
                                                        AS pf ON pf.function_id = prv.function_id
                                                WHERE   pf.name = 'CustNoteHisPF'
                                              )

            SET @NextBoundaryCustNote = ( SELECT    DATEADD(MONTH, 1,
                                                            @MinBoundaryCustNoteArchive)
                                        )

            ALTER PARTITION FUNCTION CustNoteHisPF()
            MERGE RANGE (@MinBoundaryCustNoteArchive)

            COMMIT TRANSACTION
            PRINT 'COMMIT TRANSACTION'
        END TRY
        BEGIN CATCH
            IF XACT_STATE() = -1
                BEGIN
                    ROLLBACK TRANSACTION
                    PRINT 'ROLLBACK TRANSACTION'
                    PRINT ERROR_MESSAGE()
                END

            IF XACT_STATE() = 1
                BEGIN
                    COMMIT TRANSACTION
                    PRINT 'COMMIT TRANSACTION'
                END
        END CATCH



        SET XACT_ABORT OFF


    END
GO
PRINT N'Creating [dbo].[usp_ArchiveCustomerNote]...';


GO

CREATE PROCEDURE usp_ArchiveCustomerNote
AS
    BEGIN

        DECLARE @r INT
        SET @r = 1
        WHILE @r > 0
            BEGIN 
                BEGIN TRANSACTION;        
                WAITFOR DELAY '00:00:01'
        
                INSERT  INTO Archive.CustomerNoteHistory
                        ( CustomerId ,
                          Note ,
                          CreatedDate ,
                          ModifiedDate
                        )
                        SELECT TOP 10000
                                CustomerId ,
                                Note ,
                                CreatedDate ,
                                ModifiedDate
                        FROM    Person.CustomerNote AS cn
                        WHERE   cn.CreatedDate <= DATEADD(YEAR, -1, GETDATE())

                SET @r = @@ROWCOUNT
                COMMIT TRANSACTION
            END 

        DECLARE @i INT
        SET @i = 1
        WHILE @i > 0
            BEGIN 
                BEGIN TRANSACTION;        
                WAITFOR DELAY '00:00:01'
        
                DELETE TOP ( 10000 )
                        Person.CustomerNote
                FROM    Person.CustomerNote AS cn
                WHERE   cn.CreatedDate <= DATEADD(YEAR, -1, GETDATE())

                SET @r = @@ROWCOUNT
                COMMIT TRANSACTION
            END 

    END
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [Archive].[CustomerNoteHistory] WITH CHECK CHECK CONSTRAINT [FK_CustomerNoteHistory_CustomerId_Customer_Id];

ALTER TABLE [Person].[CustomerNote] WITH CHECK CHECK CONSTRAINT [FK_CustomerNote_CustomerId_Customer_Id];


GO
PRINT N'Update complete.';


GO
