/*
Deployment script for SSDT_Team_Exercise_1

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar SingleSignOn "SingleSignOn"
:setvar DatabaseName "SSDT_Team_Exercise_1"
:setvar DefaultFilePrefix "SSDT_Team_Exercise_1"
:setvar DefaultDataPath "C:\Program Files (x86)\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files (x86)\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [Archive]...';


GO
CREATE SCHEMA [Archive]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Inventory]...';


GO
CREATE SCHEMA [Inventory]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Person]...';


GO
CREATE SCHEMA [Person]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Sales]...';


GO
CREATE SCHEMA [Sales]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [CustNoteHisPF]...';


GO
CREATE PARTITION FUNCTION [CustNoteHisPF](DATETIME)
    AS RANGE RIGHT
    FOR VALUES (N'12/1/2013');


GO
PRINT N'Creating [CustNotePF]...';


GO
CREATE PARTITION FUNCTION [CustNotePF](DATETIME)
    AS RANGE RIGHT
    FOR VALUES (N'2014-01-01T00:00:00.000', N'2014-02-01T00:00:00.000', N'2014-03-01T00:00:00.000', N'2014-04-01T00:00:00.000', N'2014-05-01T00:00:00.000', N'2014-06-01T00:00:00.000', N'2014-07-01T00:00:00.000', N'2014-08-01T00:00:00.000', N'2014-09-01T00:00:00.000', N'2014-10-01T00:00:00.000', N'2014-11-01T00:00:00.000', N'2014-12-01T00:00:00.000', N'2015-01-01T00:00:00.000', N'2015-02-01T00:00:00.000');


GO
PRINT N'Creating [CustNoteHistPS]...';


GO
CREATE PARTITION SCHEME [CustNoteHistPS]
    AS PARTITION [CustNoteHisPF]
    ALL TO ([PRIMARY]);


GO
PRINT N'Creating [CustNotePS]...';


GO
CREATE PARTITION SCHEME [CustNotePS]
    AS PARTITION [CustNotePF]
    ALL TO ([PRIMARY]);


GO
PRINT N'Creating [Archive].[CustomerNoteHistory]...';


GO
CREATE TABLE [Archive].[CustomerNoteHistory] (
    [Id]           UNIQUEIDENTIFIER NOT NULL,
    [CustomerId]   UNIQUEIDENTIFIER NOT NULL,
    [Note]         NVARCHAR (MAX)   NULL,
    [CreatedDate]  DATETIME         NOT NULL,
    [ModifiedDate] DATETIME         NOT NULL
);


GO
PRINT N'Creating [Archive].[CustomerNoteHistory].[PK_CustomerNoteHistory_Id]...';


GO
CREATE UNIQUE CLUSTERED INDEX [PK_CustomerNoteHistory_Id]
    ON [Archive].[CustomerNoteHistory]([Id] ASC, [CreatedDate] ASC)
    ON [CustNoteHistPS] ([CreatedDate]);


GO
PRINT N'Creating [Inventory].[Vehicle]...';


GO
CREATE TABLE [Inventory].[Vehicle] (
    [Id]      UNIQUEIDENTIFIER NOT NULL,
    [MakeId]  UNIQUEIDENTIFIER NOT NULL,
    [ModelId] UNIQUEIDENTIFIER NOT NULL,
    [Year]    SMALLINT         NOT NULL,
    [ColorId] UNIQUEIDENTIFIER NOT NULL,
    [Price]   MONEY            NOT NULL,
    CONSTRAINT [PK_Vehicle_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Inventory].[Color]...';


GO
CREATE TABLE [Inventory].[Color] (
    [Id]          UNIQUEIDENTIFIER NOT NULL,
    [Name]        NVARCHAR (50)    NOT NULL,
    [CreatedDate] DATETIME         NOT NULL,
    CONSTRAINT [PK_Color_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Inventory].[Make]...';


GO
CREATE TABLE [Inventory].[Make] (
    [Id]          UNIQUEIDENTIFIER NOT NULL,
    [Name]        NVARCHAR (50)    NOT NULL,
    [CreatedDate] DATETIME         NOT NULL,
    CONSTRAINT [PK_Make_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Inventory].[Model]...';


GO
CREATE TABLE [Inventory].[Model] (
    [Id]          UNIQUEIDENTIFIER NOT NULL,
    [Name]        NVARCHAR (50)    NOT NULL,
    [CreatedDate] DATETIME         NOT NULL,
    [MakeId]      UNIQUEIDENTIFIER NULL,
    CONSTRAINT [PK_Model_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Person].[CustomerAddress]...';


GO
CREATE TABLE [Person].[CustomerAddress] (
    [Id]              UNIQUEIDENTIFIER NOT NULL,
    [Street]          NVARCHAR (50)    NOT NULL,
    [City]            NVARCHAR (50)    NOT NULL,
    [PostalCode]      NVARCHAR (50)    NOT NULL,
    [CustomerId]      UNIQUEIDENTIFIER NOT NULL,
    [StateProvinceId] UNIQUEIDENTIFIER NULL,
    CONSTRAINT [PK_CustomerAddress_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Person].[CustomerPhone]...';


GO
CREATE TABLE [Person].[CustomerPhone] (
    [Id]          UNIQUEIDENTIFIER NOT NULL,
    [PhoneNumber] NVARCHAR (25)    NOT NULL,
    [CustomerId]  UNIQUEIDENTIFIER NOT NULL
);


GO
PRINT N'Creating [Person].[CustomerEmail]...';


GO
CREATE TABLE [Person].[CustomerEmail] (
    [Id]           UNIQUEIDENTIFIER NOT NULL,
    [EmailAddress] NVARCHAR (50)    NOT NULL,
    [CustomerId]   UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_CustomerEmail_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Person].[Customer]...';


GO
CREATE TABLE [Person].[Customer] (
    [Id]            UNIQUEIDENTIFIER NOT NULL,
    [PersonId]      UNIQUEIDENTIFIER NOT NULL,
    [SalespersonId] UNIQUEIDENTIFIER NULL,
    [CreatedDate]   DATE             NOT NULL,
    CONSTRAINT [PK_Customer_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Person].[Salesperson]...';


GO
CREATE TABLE [Person].[Salesperson] (
    [Id]        UNIQUEIDENTIFIER NOT NULL,
    [PersonId]  UNIQUEIDENTIFIER NOT NULL,
    [HiredDate] DATE             NULL,
    [isActive]  BIT              NULL,
    [LoginId]   UNIQUEIDENTIFIER NULL,
    CONSTRAINT [PK_Salesperson_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Person].[Person]...';


GO
CREATE TABLE [Person].[Person] (
    [Id]        UNIQUEIDENTIFIER NOT NULL,
    [IndexId]   BIGINT           IDENTITY (1, 1) NOT NULL,
    [FirstName] NVARCHAR (50)    NOT NULL,
    [LastName]  NVARCHAR (50)    NULL,
    [Birthdate] DATE             NULL,
    CONSTRAINT [PK_Person_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Person].[Person].[IX_Person_IndexId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Person_IndexId]
    ON [Person].[Person]([IndexId] ASC);


GO
PRINT N'Creating [Person].[CustomerNote]...';


GO
CREATE TABLE [Person].[CustomerNote] (
    [Id]           UNIQUEIDENTIFIER NOT NULL,
    [CustomerId]   UNIQUEIDENTIFIER NOT NULL,
    [Note]         NVARCHAR (MAX)   NULL,
    [CreatedDate]  DATETIME         NOT NULL,
    [ModifiedDate] DATETIME         NOT NULL
);


GO
PRINT N'Creating [Person].[CustomerNote].[PK_CustomerNote_Id]...';


GO
CREATE UNIQUE CLUSTERED INDEX [PK_CustomerNote_Id]
    ON [Person].[CustomerNote]([Id] ASC, [CreatedDate] ASC)
    ON [CustNotePS] ([CreatedDate]);


GO
PRINT N'Creating [Sales].[Opportunity]...';


GO
CREATE TABLE [Sales].[Opportunity] (
    [Id]                UNIQUEIDENTIFIER NOT NULL,
    [CustomerId]        UNIQUEIDENTIFIER NOT NULL,
    [VehicleId]         UNIQUEIDENTIFIER NOT NULL,
    [OpportunityTypeId] UNIQUEIDENTIFIER NOT NULL,
    [CreatedDate]       DATETIME         NOT NULL,
    CONSTRAINT [PK_Opportunity_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Sales].[OpportunityType]...';


GO
CREATE TABLE [Sales].[OpportunityType] (
    [Id]   UNIQUEIDENTIFIER NOT NULL,
    [Name] NVARCHAR (50)    NOT NULL,
    CONSTRAINT [PK_OpportunityType_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Country]...';


GO
CREATE TABLE [dbo].[Country] (
    [Id]          UNIQUEIDENTIFIER NOT NULL,
    [CountryCode] NVARCHAR (3)     NOT NULL,
    [Name]        NVARCHAR (50)    NOT NULL,
    [CreatedDate] DATETIME         NOT NULL,
    CONSTRAINT [PK_Country_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[StateProvince]...';


GO
CREATE TABLE [dbo].[StateProvince] (
    [Id]                UNIQUEIDENTIFIER NOT NULL,
    [StateProvinceCode] NCHAR (3)        NOT NULL,
    [CountryId]         UNIQUEIDENTIFIER NOT NULL,
    [Name]              NVARCHAR (50)    NOT NULL,
    [CreatedDate]       DATETIME         NOT NULL,
    CONSTRAINT [PK_StateProvince_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating unnamed constraint on [Archive].[CustomerNoteHistory]...';


GO
ALTER TABLE [Archive].[CustomerNoteHistory]
    ADD DEFAULT NEWID() FOR [Id];


GO
PRINT N'Creating unnamed constraint on [Inventory].[Vehicle]...';


GO
ALTER TABLE [Inventory].[Vehicle]
    ADD DEFAULT NEWID() FOR [Id];


GO
PRINT N'Creating unnamed constraint on [Inventory].[Color]...';


GO
ALTER TABLE [Inventory].[Color]
    ADD DEFAULT NEWID() FOR [Id];


GO
PRINT N'Creating unnamed constraint on [Inventory].[Color]...';


GO
ALTER TABLE [Inventory].[Color]
    ADD DEFAULT GETUTCDATE() FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Inventory].[Make]...';


GO
ALTER TABLE [Inventory].[Make]
    ADD DEFAULT NEWID() FOR [Id];


GO
PRINT N'Creating unnamed constraint on [Inventory].[Make]...';


GO
ALTER TABLE [Inventory].[Make]
    ADD DEFAULT GETUTCDATE() FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Inventory].[Model]...';


GO
ALTER TABLE [Inventory].[Model]
    ADD DEFAULT NEWID() FOR [Id];


GO
PRINT N'Creating unnamed constraint on [Inventory].[Model]...';


GO
ALTER TABLE [Inventory].[Model]
    ADD DEFAULT GETUTCDATE() FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Person].[CustomerAddress]...';


GO
ALTER TABLE [Person].[CustomerAddress]
    ADD DEFAULT NEWID() FOR [Id];


GO
PRINT N'Creating [Person].[PK_CustomerPhone_Id]...';


GO
ALTER TABLE [Person].[CustomerPhone]
    ADD CONSTRAINT [PK_CustomerPhone_Id] DEFAULT NEWID() FOR [Id];


GO
PRINT N'Creating unnamed constraint on [Person].[CustomerEmail]...';


GO
ALTER TABLE [Person].[CustomerEmail]
    ADD DEFAULT NEWID() FOR [Id];


GO
PRINT N'Creating unnamed constraint on [Person].[Customer]...';


GO
ALTER TABLE [Person].[Customer]
    ADD DEFAULT NEWID() FOR [Id];


GO
PRINT N'Creating unnamed constraint on [Person].[Customer]...';


GO
ALTER TABLE [Person].[Customer]
    ADD DEFAULT CONVERT(DATE,GETUTCDATE()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Person].[Salesperson]...';


GO
ALTER TABLE [Person].[Salesperson]
    ADD DEFAULT NEWID() FOR [Id];


GO
PRINT N'Creating unnamed constraint on [Person].[Salesperson]...';


GO
ALTER TABLE [Person].[Salesperson]
    ADD DEFAULT CONVERT (DATE, GETUTCDATE()) FOR [HiredDate];


GO
PRINT N'Creating unnamed constraint on [Person].[Salesperson]...';


GO
ALTER TABLE [Person].[Salesperson]
    ADD DEFAULT CAST(1 AS BIT) FOR [isActive];


GO
PRINT N'Creating unnamed constraint on [Person].[Person]...';


GO
ALTER TABLE [Person].[Person]
    ADD DEFAULT NEWID() FOR [Id];


GO
PRINT N'Creating unnamed constraint on [Person].[CustomerNote]...';


GO
ALTER TABLE [Person].[CustomerNote]
    ADD DEFAULT NEWID() FOR [Id];


GO
PRINT N'Creating unnamed constraint on [Sales].[Opportunity]...';


GO
ALTER TABLE [Sales].[Opportunity]
    ADD DEFAULT NEWID() FOR [Id];


GO
PRINT N'Creating unnamed constraint on [Sales].[Opportunity]...';


GO
ALTER TABLE [Sales].[Opportunity]
    ADD DEFAULT GETUTCDATE() FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [Sales].[OpportunityType]...';


GO
ALTER TABLE [Sales].[OpportunityType]
    ADD DEFAULT NEWID() FOR [Id];


GO
PRINT N'Creating unnamed constraint on [dbo].[Country]...';


GO
ALTER TABLE [dbo].[Country]
    ADD DEFAULT NEWID() FOR [Id];


GO
PRINT N'Creating unnamed constraint on [dbo].[Country]...';


GO
ALTER TABLE [dbo].[Country]
    ADD DEFAULT GETUTCDATE() FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[StateProvince]...';


GO
ALTER TABLE [dbo].[StateProvince]
    ADD DEFAULT NEWID() FOR [Id];


GO
PRINT N'Creating unnamed constraint on [dbo].[StateProvince]...';


GO
ALTER TABLE [dbo].[StateProvince]
    ADD DEFAULT GETUTCDATE() FOR [CreatedDate];


GO
PRINT N'Creating [Archive].[FK_CustomerNoteHistory_CustomerId_Customer_Id]...';


GO
ALTER TABLE [Archive].[CustomerNoteHistory]
    ADD CONSTRAINT [FK_CustomerNoteHistory_CustomerId_Customer_Id] FOREIGN KEY ([CustomerId]) REFERENCES [Person].[Customer] ([Id]);


GO
PRINT N'Creating [Inventory].[FK_Vehicle_MakeId_Make_Id]...';


GO
ALTER TABLE [Inventory].[Vehicle]
    ADD CONSTRAINT [FK_Vehicle_MakeId_Make_Id] FOREIGN KEY ([MakeId]) REFERENCES [Inventory].[Make] ([Id]);


GO
PRINT N'Creating [Inventory].[FK_Vehicle_ModelId_Model_Id]...';


GO
ALTER TABLE [Inventory].[Vehicle]
    ADD CONSTRAINT [FK_Vehicle_ModelId_Model_Id] FOREIGN KEY ([ModelId]) REFERENCES [Inventory].[Model] ([Id]);


GO
PRINT N'Creating [Inventory].[FK_Vehicle_ColorId_Color_Id]...';


GO
ALTER TABLE [Inventory].[Vehicle]
    ADD CONSTRAINT [FK_Vehicle_ColorId_Color_Id] FOREIGN KEY ([ColorId]) REFERENCES [Inventory].[Color] ([Id]);


GO
PRINT N'Creating [Inventory].[FK_Model_MakeId_Make_Id]...';


GO
ALTER TABLE [Inventory].[Model]
    ADD CONSTRAINT [FK_Model_MakeId_Make_Id] FOREIGN KEY ([MakeId]) REFERENCES [Inventory].[Make] ([Id]);


GO
PRINT N'Creating [Person].[FK_CustomerAddress_CustomerId_Customer_Id]...';


GO
ALTER TABLE [Person].[CustomerAddress]
    ADD CONSTRAINT [FK_CustomerAddress_CustomerId_Customer_Id] FOREIGN KEY ([CustomerId]) REFERENCES [Person].[Customer] ([Id]);


GO
PRINT N'Creating [Person].[FK_CustomerAddress_StateProvinceId_StateProvince_Id]...';


GO
ALTER TABLE [Person].[CustomerAddress]
    ADD CONSTRAINT [FK_CustomerAddress_StateProvinceId_StateProvince_Id] FOREIGN KEY ([StateProvinceId]) REFERENCES [dbo].[StateProvince] ([Id]);


GO
PRINT N'Creating [Person].[FK_CustomerPhone_CustomerId_Customer_Id]...';


GO
ALTER TABLE [Person].[CustomerPhone]
    ADD CONSTRAINT [FK_CustomerPhone_CustomerId_Customer_Id] FOREIGN KEY ([CustomerId]) REFERENCES [Person].[Customer] ([Id]);


GO
PRINT N'Creating [Person].[FK_CustomerEmail_CustomerId_Customer_Id]...';


GO
ALTER TABLE [Person].[CustomerEmail]
    ADD CONSTRAINT [FK_CustomerEmail_CustomerId_Customer_Id] FOREIGN KEY ([CustomerId]) REFERENCES [Person].[Customer] ([Id]);


GO
PRINT N'Creating [Person].[FK_Customer_PersonId_Person_Id]...';


GO
ALTER TABLE [Person].[Customer]
    ADD CONSTRAINT [FK_Customer_PersonId_Person_Id] FOREIGN KEY ([PersonId]) REFERENCES [Person].[Person] ([Id]);


GO
PRINT N'Creating [Person].[FK_Customer_SalespersonId_Salesperson_Id]...';


GO
ALTER TABLE [Person].[Customer]
    ADD CONSTRAINT [FK_Customer_SalespersonId_Salesperson_Id] FOREIGN KEY ([SalespersonId]) REFERENCES [Person].[Salesperson] ([Id]);


GO
PRINT N'Creating [Person].[FK_Salesperson_PersonId_Person_Id]...';


GO
ALTER TABLE [Person].[Salesperson]
    ADD CONSTRAINT [FK_Salesperson_PersonId_Person_Id] FOREIGN KEY ([PersonId]) REFERENCES [Person].[Person] ([Id]);


GO
PRINT N'Creating [Person].[FK_CustomerNote_CustomerId_Customer_Id]...';


GO
ALTER TABLE [Person].[CustomerNote]
    ADD CONSTRAINT [FK_CustomerNote_CustomerId_Customer_Id] FOREIGN KEY ([CustomerId]) REFERENCES [Person].[Customer] ([Id]);


GO
PRINT N'Creating [Sales].[FK_Opportunity_CustomerId_Customer_Id]...';


GO
ALTER TABLE [Sales].[Opportunity]
    ADD CONSTRAINT [FK_Opportunity_CustomerId_Customer_Id] FOREIGN KEY ([CustomerId]) REFERENCES [Person].[Customer] ([Id]);


GO
PRINT N'Creating [Sales].[FK_Opportunity_VehicleId_Vehicle_Id]...';


GO
ALTER TABLE [Sales].[Opportunity]
    ADD CONSTRAINT [FK_Opportunity_VehicleId_Vehicle_Id] FOREIGN KEY ([VehicleId]) REFERENCES [Inventory].[Vehicle] ([Id]);


GO
PRINT N'Creating [Sales].[FK_Opportunity_OpportunityTypeId_OpportunityType_Id]...';


GO
ALTER TABLE [Sales].[Opportunity]
    ADD CONSTRAINT [FK_Opportunity_OpportunityTypeId_OpportunityType_Id] FOREIGN KEY ([OpportunityTypeId]) REFERENCES [Sales].[OpportunityType] ([Id]);


GO
PRINT N'Creating [dbo].[FK_StateProvince_CountryId_Country_Id]...';


GO
ALTER TABLE [dbo].[StateProvince]
    ADD CONSTRAINT [FK_StateProvince_CountryId_Country_Id] FOREIGN KEY ([CountryId]) REFERENCES [dbo].[Country] ([Id]);


GO
PRINT N'Creating [Person].[CK_Person_ValidateAge]...';


GO
ALTER TABLE [Person].[Person]
    ADD CONSTRAINT [CK_Person_ValidateAge] CHECK (DATEDIFF(YEAR,[Birthdate],GETDATE()) >= 18);


GO
PRINT N'Creating [Inventory].[vw_SelectVehicles]...';


GO
CREATE VIEW [Inventory].[vw_SelectVehicles]
	AS 
	
	SELECT 
		v.Id AS VehicleId,
		m.Name AS Make,
		mo.Name AS Model,
		c.Name AS Color
	FROM Inventory.Vehicle AS v
	LEFT OUTER JOIN Inventory.Make AS m
		ON m.Id = v.MakeId
	LEFT OUTER JOIN Inventory.Model AS mo
		ON mo.Id = v.ModelId
	LEFT OUTER JOIN Inventory.Color AS c
		ON c.Id = v.ColorId
GO
PRINT N'Creating [Inventory].[vw_Vehicles]...';


GO
CREATE VIEW [Inventory].[vw_Vehicles]
	AS 

	SELECT 
		v.Id AS VehicleId,
		m.Name AS Make,
		mo.Name AS Model
	FROM Inventory.Vehicle AS v
	LEFT OUTER JOIN Inventory.Make AS m
		ON m.Id = v.MakeId
	LEFT OUTER JOIN Inventory.Model AS mo
		ON mo.Id = v.ModelId
GO
PRINT N'Creating [Person].[vw_SelectSalespersonLogin]...';


GO
CREATE VIEW [Person].[vw_SelectSalespersonLogin]
AS
SELECT u.Username AS Username,
		u.[Password] AS [Password] 		
FROM Person.Salesperson AS s
LEFT OUTER JOIN [$(SingleSignOn)].dbo.[User] AS u
	ON s.LoginId = u.Id
GO
PRINT N'Creating [Person].[vw_Customers]...';


GO
CREATE VIEW [Person].[vw_Customers]
	AS

SELECT  Person.[FirstName] AS FirstName ,
        Person.[LastName] AS LastName ,
        ISNULL(Email.EmailAddress,N'') AS Email,
		ISNULL(Phone.PhoneNumber,N'') AS Phone,
		ISNULL(Address.Street + SPACE(1) + Address.City + N',' + StateProv.Name + SPACE(1) + Address.PostalCode,N'') AS [Address]
FROM    Person.Person AS Person
        LEFT OUTER JOIN Person.Customer AS Customer ON Customer.PersonId = Person.Id
        LEFT OUTER JOIN Person.CustomerEmail AS Email ON Email.CustomerId = Customer.Id
		LEFT OUTER JOIN Person.CustomerAddress AS [Address] ON Address.CustomerId = Customer.Id
		LEFT OUTER JOIN Person.CustomerPhone AS Phone ON Phone.CustomerId = Customer.Id
		LEFT OUTER JOIN dbo.StateProvince AS StateProv ON [Address].StateProvinceId = StateProv.Id
GO
PRINT N'Creating [Sales].[vw_CustomersOpportunities]...';


GO
CREATE VIEW [Sales].[vw_CustomersOpportunities]
	AS 
	
	SELECT 
		Person.[FirstName],
		Person.[LastName],
		OppType.Name AS OppType,
		Vehic.Year AS VehicleYear,
		Make.Name AS Make,
		Model.Name AS Model,
		opps.CreatedDate AS OppOpen
	FROM Person.Person AS Person
	INNER JOIN Person.Customer AS Cust
		ON Cust.PersonId = Person.Id
	INNER JOIN Sales.Opportunity AS Opps
		ON Opps.CustomerId = Cust.Id
	INNER JOIN Sales.OpportunityType AS OppType
		ON OppType.Id = Opps.OpportunityTypeId
	INNER JOIN Inventory.Vehicle AS Vehic
		ON Vehic.Id = Opps.VehicleId
	INNER JOIN Inventory.Make AS Make
		ON Make.Id = Vehic.MakeId
	INNER JOIN Inventory.Model AS Model
		ON Model.Id = Vehic.ModelId
GO
PRINT N'Creating [Person].[usp_UpdateSalespersonLogin]...';


GO
CREATE PROCEDURE Person.usp_UpdateSalespersonLogin
    @NewLoginId UNIQUEIDENTIFIER ,
    @SalespersonId UNIQUEIDENTIFIER
AS
    UPDATE  Person.Salesperson
    SET     LoginId = @NewLoginId
    WHERE   Id = @SalespersonId
GO
PRINT N'Creating [Sales].[usp_OpportunitiesByType]...';


GO
CREATE PROCEDURE [Sales].[usp_OpportunitiesByType]	@OpportunityType NVARCHAR(55)

AS

SELECT o.Id,
	   o.CustomerId
FROM Sales.Opportunity AS o
INNER JOIN Sales.OpportunityType AS ot
	ON o.OpportunityTypeId = ot.Id
	WHERE ot.Name = @OpportunityType
GO
PRINT N'Creating [dbo].[usp_ArchiveCustomerNote]...';


GO

CREATE PROCEDURE usp_ArchiveCustomerNote
AS
    BEGIN

        DECLARE @r INT
        SET @r = 1
        WHILE @r > 0
            BEGIN 
                BEGIN TRANSACTION;        
                WAITFOR DELAY '00:00:01'
        
                INSERT  INTO Archive.CustomerNoteHistory
                        ( CustomerId ,
                          Note ,
                          CreatedDate ,
                          ModifiedDate
                        )
                        SELECT TOP 10000
                                CustomerId ,
                                Note ,
                                CreatedDate ,
                                ModifiedDate
                        FROM    Person.CustomerNote AS cn
                        WHERE   cn.CreatedDate <= DATEADD(YEAR, -1, GETDATE())

                SET @r = @@ROWCOUNT
                COMMIT TRANSACTION
            END 

        DECLARE @i INT
        SET @i = 1
        WHILE @i > 0
            BEGIN 
                BEGIN TRANSACTION;        
                WAITFOR DELAY '00:00:01'
        
                DELETE TOP ( 10000 )
                        Person.CustomerNote
                FROM    Person.CustomerNote AS cn
                WHERE   cn.CreatedDate <= DATEADD(YEAR, -1, GETDATE())

                SET @r = @@ROWCOUNT
                COMMIT TRANSACTION
            END 

    END
GO
PRINT N'Creating [dbo].[usp_ArchiveCustomerNoteSwitch]...';


GO

CREATE PROCEDURE usp_ArchiveCustomerNoteSwitch
AS
    BEGIN

        SET XACT_ABORT ON

        DECLARE @MinBoundaryCustNote NVARCHAR(25)
        DECLARE @NextBoundaryCustNote NVARCHAR(25)
        DECLARE @MinBoundaryCustNoteArchive NVARCHAR(25)
        DECLARE @NextBoundaryCustNoteArchive NVARCHAR(25)
        DECLARE @Constraint_Sqlsmtpt NVARCHAR(MAX)


        BEGIN TRY
            BEGIN TRANSACTION

----Person.CustomerNote----
            SET @MinBoundaryCustNote =
                ( SELECT    MIN(CONVERT(VARCHAR(10), CAST(value AS DATE), 120))
                  FROM      master.sys.partition_range_values AS prv
                            INNER JOIN sys.partition_functions AS pf ON pf.function_id = prv.function_id
                  WHERE     pf.name = 'CustNotePF'
                )

            SET @NextBoundaryCustNote =
                ( SELECT    MAX(CONVERT(VARCHAR(10), DATEADD(MONTH, 1,
                                                             CAST(value AS DATE)), 120))
                  FROM      sys.partition_range_values AS prv
                            INNER JOIN sys.partition_functions AS pf ON pf.function_id = prv.function_id
                  WHERE     pf.name = 'CustNotePF'
                )

--Split in New Part to Archive Table here, matching boundary in src
            ALTER PARTITION SCHEME CustNoteHistPS NEXT USED [PRIMARY]
            ALTER PARTITION FUNCTION CustNoteHisPF()
            SPLIT RANGE (@MinBoundaryCustNote)
	
--Drop Constraint and Re-Create with min boundary on src table
            IF EXISTS ( SELECT  *
                        FROM    sys.check_constraints AS cs
                        WHERE   cs.name = 'chk_CreatedDate' )
                BEGIN
                    ALTER TABLE Person.CustomerNote DROP CONSTRAINT chk_CreatedDate
                END 

            SET @Constraint_Sqlsmtpt = 'ALTER TABLE person.CustomerNote ADD CONSTRAINT chk_CreatedDate CHECK (CreatedDate >='
                + ''''
                + CAST(DATEADD(MONTH, -1, @MinBoundaryCustNote) AS NVARCHAR(255))
                + ''')'

            EXEC(@Constraint_Sqlsmtpt)

--Move Data to Part in Archive
            ALTER TABLE Person.CustomerNote SWITCH 
            PARTITION 1 TO Archive.CustomerNoteHistory PARTITION 2

--Deleting the old empty partition
            ALTER PARTITION FUNCTION CustNotePF()
            MERGE RANGE (@MinBoundaryCustNote)

 --Adding new part for current mo
            ALTER PARTITION SCHEME CustNotePS NEXT USED [PRIMARY]

            ALTER PARTITION FUNCTION CustNotePF()
            SPLIT RANGE (@NextBoundaryCustNote)

----Archive.CustomerNoteHistory----

            SET @MinBoundaryCustNoteArchive = ( SELECT TOP 1
                                                        MIN(CONVERT(VARCHAR(10), CAST(value AS DATE), 120))
                                                FROM    sys.partition_range_values
                                                        AS prv
                                                        INNER JOIN sys.partition_functions
                                                        AS pf ON pf.function_id = prv.function_id
                                                WHERE   pf.name = 'CustNoteHisPF'
                                              )

            SET @NextBoundaryCustNote = ( SELECT    DATEADD(MONTH, 1,
                                                            @MinBoundaryCustNoteArchive)
                                        )

            ALTER PARTITION FUNCTION CustNoteHisPF()
            MERGE RANGE (@MinBoundaryCustNoteArchive)

            COMMIT TRANSACTION
            PRINT 'COMMIT TRANSACTION'
        END TRY
        BEGIN CATCH
            IF XACT_STATE() = -1
                BEGIN
                    ROLLBACK TRANSACTION
                    PRINT 'ROLLBACK TRANSACTION'
                    PRINT ERROR_MESSAGE()
                END

            IF XACT_STATE() = 1
                BEGIN
                    COMMIT TRANSACTION
                    PRINT 'COMMIT TRANSACTION'
                END
        END CATCH



        SET XACT_ABORT OFF


    END
GO
PRINT N'Creating [dbo].[usp_SelectLoginInformation]...';


GO
CREATE PROCEDURE [dbo].[usp_SelectLoginInformation]
	@SalespersonId UNIQUEIDENTIFIER
AS

SELECT [Username], 
       [Password], 
	   [LastLogonDate] 
FROM [$(SingleSignOn)].dbo.[User] AS u
INNER JOIN Person.[Salesperson] AS s
	ON s.LoginId = u.Id
		WHERE s.Id = @SalespersonId
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a7be8ed6-617b-407a-b64c-f79f88c021e2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a7be8ed6-617b-407a-b64c-f79f88c021e2')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e59fd519-2d05-400a-af98-67f016780c9e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e59fd519-2d05-400a-af98-67f016780c9e')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
