<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="dbo_usp_DeleteRoleTest_TestAction.SqlScript" xml:space="preserve">
    <value>DECLARE @TestRoleName nvarchar(55)
SET @TestRoleName = 'UnitTestRoleDelete'

EXEC dbo.usp_DeleteRole

SELECT  *
FROM    [Role] AS r
WHERE   NOT EXISTS ( SELECT *
                     FROM   [User] AS u
                     WHERE  u.RoleId = r.Id )
        AND r.Name = @TestRoleName</value>
  </data>
  <metadata name="checksumCondition1.Configuration" xml:space="preserve">
    <value>Press to configure</value>
  </metadata>
  <data name="dbo_usp_InsertLoginTest_TestAction.SqlScript" xml:space="preserve">
    <value>DECLARE @TestUser NVARCHAR(55) = 'UserUnitTest'

EXEC dbo.usp_InsertLogin @User = @TestUser, -- nvarchar(55)
    @Password = N'P@ssw0rd', -- nvarchar(55)
    @RoleName = 'Sales', -- nvarchar(55)
    @LastLogonDate = '2015-02-18 15:18:20', -- date
    @CreatedDate = '2015-02-18 15:18:20' -- date

SELECT
	Username,
	[Password],
	RoleId
FROM [User] AS u
WHERE u.Username = @TestUser</value>
  </data>
  <metadata name="checksumCondition2.Configuration" xml:space="preserve">
    <value>Press to configure</value>
  </metadata>
  <data name="dbo_usp_InsertRoleTest_TestAction.SqlScript" xml:space="preserve">
    <value>DECLARE @TestRoleName NVARCHAR(55) 
SET @TestRoleName = 'UnitTestRoleInsert'

EXEC dbo.usp_InsertRole @Name = @TestRoleName, -- nvarchar(55)
    @CreatedDate = '2015-02-18 14:58:45', -- date
    @ModifiedDate = '2015-02-18 14:58:45' -- date

SELECT
	Name
FROM dbo.[Role]
WHERE Name = @TestRoleName</value>
  </data>
  <metadata name="checksumCondition3.Configuration" xml:space="preserve">
    <value>Press to configure</value>
  </metadata>
  <data name="dbo_usp_UpdateLoginTest_TestAction.SqlScript" xml:space="preserve">
    <value>DECLARE @UnitTestUserInitName NVARCHAR(55) ,
        @UnitTestUserNamePwordExpected NVARCHAR(55)

SET @UnitTestUserInitName = 'InitialTestUser'
SET @UnitTestUserNamePwordExpected = 'UpdateTestUserPword'

EXEC dbo.usp_UpdateLogin @Username = @UnitTestUserInitName, -- nvarchar(55)
    @NewPassword = @UnitTestUserNamePwordExpected

SELECT
	[Password]
 FROM dbo.[User] WHERE Username = @UnitTestUserInitName</value>
  </data>
  <metadata name="checksumCondition4.Configuration" xml:space="preserve">
    <value>Press to configure</value>
  </metadata>
  <data name="dbo_usp_UpdateRoleTest_TestAction.SqlScript" xml:space="preserve">
    <value>DECLARE @TestRoleName NVARCHAR(55) ,
        @TestRoleExpectedUpdatedName NVARCHAR(55)

SET @TestRoleName = 'UnitTestRoleUpdate'
SET @TestRoleExpectedUpdatedName = 'UnitTestRoleUpdated'

EXEC dbo.usp_UpdateRole @ExistingName = @TestRoleName, -- nvarchar(55)
    @NewName = @TestRoleExpectedUpdatedName -- nvarchar(55)

SELECT
	Name
FROM [Role] 
WHERE [Name] = @TestRoleExpectedUpdatedName</value>
  </data>
  <data name="dbo_usp_DeleteRoleTest_PretestAction.SqlScript" xml:space="preserve">
    <value>DECLARE @TestRoleName nvarchar(55)
SET @TestRoleName = 'UnitTestRoleDelete'

INSERT  INTO dbo.Role
        ( Id ,
          Name ,
          CreatedDate ,
          ModifiedDate
        )
VALUES  ( NEWID() , -- Id - uniqueidentifier
          @TestRoleName , -- Name - nvarchar(50)
          GETUTCDATE() ,
          GETUTCDATE()
        )

</value>
  </data>
  <data name="dbo_usp_InsertLoginTest_PosttestAction.SqlScript" xml:space="preserve">
    <value>DECLARE @RC1 INT
DECLARE @RC2 INT

DECLARE @TestUser NVARCHAR(55) = 'UserUnitTest'

DELETE dbo.[User] 
FROM    dbo.[User]
WHERE   Username = @TestUser

SET @RC1 = @@ROWCOUNT

SELECT  @RC1

DELETE dbo.Role
FROM dbo.Role
WHERE Name = 'Sales'

SET @RC2 = @@ROWCOUNT

SELECT @RC2</value>
  </data>
  <data name="dbo_usp_InsertLoginTest_PretestAction.SqlScript" xml:space="preserve">
    <value>INSERT INTO dbo.Role
        ( Id ,
          Name ,
          CreatedDate ,
          ModifiedDate
        ) OUTPUT INSERTED.Id
VALUES  ( '9BC84DC5-9342-4232-A66D-6D374EA2BB94' , -- Id - uniqueidentifier
          N'Sales' , -- Name - nvarchar(50)
          '2015-02-19 18:35:47' , -- CreatedDate - date
          '2015-02-19 18:35:47'  -- ModifiedDate - date
        )</value>
  </data>
  <data name="dbo_usp_InsertRoleTest_PosttestAction.SqlScript" xml:space="preserve">
    <value>DECLARE @TestRoleName NVARCHAR(55) 
DECLARE @RC INT

SET @TestRoleName = 'UnitTestRoleInsert'

DELETE 
FROM dbo.Role 
WHERE Name = @TestRoleName

SET @RC = @@ROWCOUNT

SELECT @RC</value>
  </data>
  <data name="dbo_usp_UpdateLoginTest_PosttestAction.SqlScript" xml:space="preserve">
    <value>
DECLARE @UnitTestUserInitName NVARCHAR(55) ,
        @UnitTestUserNamePwordExpected NVARCHAR(55)

SET @UnitTestUserInitName = 'InitialTestUser'
SET @UnitTestUserNamePwordExpected = 'UpdateTestUserPword'

DELETE FROM dbo.[User] WHERE Username = @UnitTestUserInitName

DELETE FROM dbo.Role WHERE Id = '10B75DAC-E921-425A-85E3-DCFA2DF58EF0'

</value>
  </data>
  <data name="dbo_usp_UpdateLoginTest_PretestAction.SqlScript" xml:space="preserve">
    <value>DECLARE @UnitTestUserInitName NVARCHAR(55) 

SET @UnitTestUserInitName = 'InitialTestUser'

INSERT INTO dbo.Role
        ( Id ,
          Name ,
          CreatedDate ,
          ModifiedDate
        )
VALUES  ( '10B75DAC-E921-425A-85E3-DCFA2DF58EF0' , -- Id - uniqueidentifier
          N'Sales' , -- Name - nvarchar(50)
          '2015-02-19 19:00:56' , -- CreatedDate - date
          '2015-02-19 19:00:56'  -- ModifiedDate - date
        )


INSERT  INTO dbo.[User]
        ( Id ,
          Username ,
          Password ,
          RoleId ,
          LastLogonDate ,
          CreatedDate
        ) OUTPUT INSERTED.Id
VALUES  ( NEWID() , -- Id - uniqueidentifier
          @UnitTestUserInitName , -- Username - nvarchar(50)
          N'P@ssw0rd' , -- Password - nvarchar(50)
          '10B75DAC-E921-425A-85E3-DCFA2DF58EF0' , -- RoleId
          '2015-02-18 18:46:54' , -- LastLogonDate - date
          '2015-02-18 18:46:54'  -- CreatedDate - date
        )</value>
  </data>
  <data name="dbo_usp_UpdateRoleTest_PosttestAction.SqlScript" xml:space="preserve">
    <value>DECLARE @TestRoleName NVARCHAR(55) ,
        @TestRoleExpectedUpdatedName NVARCHAR(55)

SET @TestRoleName = 'UnitTestRoleUpdate'
SET @TestRoleExpectedUpdatedName = 'UnitTestRoleUpdated'

DELETE  FROM dbo.[Role]
WHERE   Name = @TestRoleExpectedUpdatedName

</value>
  </data>
  <data name="dbo_usp_UpdateRoleTest_PretestAction.SqlScript" xml:space="preserve">
    <value>DECLARE @TestRoleName NVARCHAR(55) ,
    @TestRoleExpectedUpdatedName NVARCHAR(55)

SET @TestRoleName = 'UnitTestRoleUpdate'
SET @TestRoleExpectedUpdatedName = 'UnitTestRoleUpdated'

SET NOCOUNT ON;

INSERT  INTO dbo.Role
        ( Id ,
          Name ,
          CreatedDate ,
          ModifiedDate
        ) OUTPUT INSERTED.Id
VALUES  ( NEWID() , -- Id - uniqueidentifier
          @TestRoleName , -- Name - nvarchar(50)
          GETUTCDATE() ,
          GETUTCDATE()
        )</value>
  </data>
  <metadata name="checksumCondition1.Configuration" xml:space="preserve">
    <value>Press to configure</value>
  </metadata>
  <metadata name="checksumCondition2.Configuration" xml:space="preserve">
    <value>Press to configure</value>
  </metadata>
  <metadata name="checksumCondition3.Configuration" xml:space="preserve">
    <value>Press to configure</value>
  </metadata>
  <metadata name="$this.Localizable" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
</root>